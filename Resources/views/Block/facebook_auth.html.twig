<div class="box box-primary">
    <div class="box-header">
        <h4 class="box-title">Facebook Login</h4>
        <p id="fb-status">Login with Facebook and choose from your available Facebook entities.</p>
    </div>
    <div class="box-body">
        <div class="sonata-ba-collapsed-fields">
            <div class="form-group">
                <fb:login-button scope="public_profile,email,publish_pages,user_events,publish_video" onlogin="checkLoginState();" autologoutlink="true" />
            </div>
            <div class="form-group">
                <label for="livebroadcast-fb-entity-select"></label>
                <select id="livebroadcast-fb-entity-select">
                    <option>Select your Facebook entity</option>
                </select>
            </div>
        </div>
    </div>
</div>

{% block facebook_js %}
    <script type="text/javascript">
        /* global FB: false */
        function statusChangeCallback(response) {
            $('#livebroadcast-fb-entity-select').html('<option>Select your Facebook entity</option>');

            if (response.status === 'connected') {
                document.getElementById('fb-status').innerHTML = 'Login with Facebook and choose from your available Facebook entities.';
                getAccountsForLoggedInUser();
            } else if (response.status === 'not_authorized') {
                document.getElementById('fb-status').innerHTML = 'Please request Facebook access from your Live Stream app maintainer.';
            } else {
                document.getElementById('fb-status').innerHTML = 'Please log into Facebook.';
            }
        }

        function checkLoginState() {
            FB.getLoginStatus(function(response) {
                statusChangeCallback(response);
            });
        }

        window.fbAsyncInit = function() {
            FB.init({
                appId      : '{{ facebookAppId }}',
                cookie     : true,
                xfbml      : true,
                version    : 'v3.0'
            });

            FB.getLoginStatus(function(response) {
                statusChangeCallback(response);
            });

            $('#livebroadcast-fb-entity-select').on('change', function(){
                let selected = $(this).find('option:selected');

                if (selected.val().length > 0) {
                    $('input.generic-channel-name').val(selected.text());
                    $('input.fb-access-token').val(selected.attr('data-access-token'));
                    $('input.fb-entity-id').val(selected.val());
                }
            });
        };

        (function(d, s, id) {
            let js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) return;
            js = d.createElement(s); js.id = id;
            js.src = "https://connect.facebook.net/en_US/sdk.js";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));

        function getAccountsForLoggedInUser() {
            let channel, option;

            /**
             * Get URL variables
             */
            function getUrlVars(url) {
                let vars = {}, hash;
                let hashes = url.slice(url.indexOf('?') + 1).split('&');
                for(let i = 0; i < hashes.length; i++)
                {
                    hash = hashes[i].split('=');
                    vars[hash[0]] = hash[1];
                }
                return vars;
            }

            /**
             * Make user selectable
             */
            function makeMeSelectable(meResponse) {
                if (meResponse.id) {
                    option = $('<option>');
                    option.text('Personal Facebook account: ' + meResponse.name);
                    option.attr('value', meResponse.id);

                    /* Get a long lived access token for the user access token */
                    $.ajax({
                        url: '{{ admin.generateUrl('longLivedAccessToken') }}',
                        data: {
                            'userAccessToken': FB.getAccessToken()
                        },
                        success: function(data) {
                            option.attr('data-access-token', data.accessToken);
                            $('#livebroadcast-fb-entity-select').append(option);

                            FB.broadcast = { accessToken: data.accessToken };

                            /* Retrieve page access tokens with the long lived user access token */
                            FB.api('/me/accounts', {access_token: data.accessToken }, makeAccountSelectable);
                            FB.api('/me/groups', makeGroupsSelectable);
                            FB.api('/me/events', makeEventsSelectable);
                        }
                    });
                }
            }

            /**
             * Loop streamable data and create option values
             */
            function loopStreams(response, accessToken, typeLabel) {
                let useStaticToken = !!accessToken,
                    useStaticLabel = !!typeLabel;

                let i = 0, l = response.data.length;
                for (; i<l; i++) {
                    channel = response.data[i];
                    option = $('<option>');
                    option.text((useStaticLabel ? typeLabel: channel.category) + ': ' + channel.name);
                    option.attr('value', channel.id);
                    option.attr('data-access-token', (useStaticToken ? accessToken : channel.access_token));

                    $('#livebroadcast-fb-entity-select').append(option);
                }
            }

            /**
             * Handle a page with data
             */
            function makeAccountSelectable(response) {
                loopStreams(response, null, null);

                if (response.paging && response.paging.next) {
                    let params = getUrlVars(response.paging.next);
                    FB.api('/me/accounts', params, makeAccountSelectable)
                }
            }

            /**
             * Make groups selectable
             * @param response
             */
            function makeGroupsSelectable(response) {
                loopStreams(response, FB.broadcast.accessToken, 'Group');

                if (response.paging && response.paging.next) {
                    let params = getUrlVars(response.paging.next);
                    FB.api('/me/groups', params, makeGroupsSelectable)
                }
            }

            /**
             * Make events selectable
             * @param response
             */
            function makeEventsSelectable(response) {
                loopStreams(response, FB.broadcast.accessToken, 'Event');

                if (response.paging && response.paging.next) {
                    let params = getUrlVars(response.paging.next);
                    FB.api('/me/events', params, makeEventsSelectable)
                }
            }

            FB.api('/me', makeMeSelectable);
        }
    </script>
{% endblock %}
